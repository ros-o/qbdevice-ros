<launch>
  <arg name="device_name" doc="The unique device name used in the yaml controller configurations."/>
  <arg name="device_type" doc="The type of the device [qbhand, qbmove, qbclaw, ...]."/>
  <arg name="robot_namespace" doc="The unique robot namespace."/>

  <group ns="control">
    <!-- load controller configurations -->
    <group if="$(eval device_type == 'qbhand')">
      <rosparam file="$(eval find('qb_hand_control') + '/config/qbhand_controllers.yaml')" command="load" subst_value="true"/>

      <!-- spawn the controllers in current namespace -->
      <include file="$(find qb_device_control)/launch/spawner_template.launch">
        <arg name="device_controllers" value="$(arg device_name)_joint_state_controller
                                              $(arg device_name)_synergy_trajectory_controller"/>
      </include>
    </group>
    <group if="$(eval device_type == 'qbhand2m')">
      <rosparam file="$(eval find('qb_hand_control') + '/config/qbhand2m_controllers.yaml')" command="load" subst_value="true"/>

      <!-- spawn the controllers in current namespace -->
      <include file="$(find qb_device_control)/launch/spawner_template.launch">
        <arg name="device_controllers" value="$(arg device_name)_joint_state_controller
                                              $(arg device_name)_synergies_trajectory_controller"/>
      </include>
      <!-- load the single motor controller-->
      <node name="$(anon controller_spawner)" pkg="controller_manager" type="controller_manager"
            respawn="false" output="screen"
            args="load $(arg device_name)_motor_positions_trajectory_controller"/>
    </group>

    <group if="$(eval device_type == 'qbmove')">
      <rosparam file="$(eval find('qb_move_control') + '/config/qbmove_controllers.yaml')" command="load" subst_value="true"/>

      <!-- spawn the controllers in current namespace -->
      <include file="$(find qb_device_control)/launch/spawner_template.launch">
        <arg name="device_controllers" value="$(arg device_name)_joint_state_controller
                                              $(arg device_name)_position_and_preset_trajectory_controller"/>
      </include>
    </group>

    <group if="$(eval device_type =='qbclaw')">
      <rosparam file="$(eval find('qb_move_control') + '/config/qbmove_controllers.yaml')" command="load" subst_value="true"/>
      
      <!-- spawn the controllers in current namespace -->
      <include file="$(find qb_device_control)/launch/spawner_template.launch">
        <arg name="device_controllers" value="$(arg device_name)_joint_state_controller
                                              $(arg device_name)_deflection_trajectory_controller"/>
      </include>

      <node name="$(anon controller_spawner)" pkg="controller_manager" type="controller_manager"
          respawn="false" output="screen"
          args="load $(arg device_name)_position_and_preset_trajectory_controller"/>
    </group>
  </group>

  <!-- load controller parameters to be retrieved by each device hardware interface for references initialization -->
  <group ns="$(arg device_name)">
    <group if="$(eval device_type == 'qbhand')">
      <param name="default_controller" type="str" value="/control/$(arg device_name)_synergy_trajectory_controller"/>
    </group>
    <group if="$(eval device_type == 'qbhand2m')">
      <param name="default_controller" type="str" value="/control/$(arg device_name)_synergies_trajectory_controller"/>
    </group>
    <group if="$(eval device_type == 'qbmove')">
      <param name="default_controller" type="str" value="/control/$(arg device_name)_position_and_preset_trajectory_controller"/>
    </group>
    <group if="$(eval device_type =='qbclaw')">
      <param name="default_controller" type="str" value="/control/$(arg device_name)_deflection_trajectory_controller"/>
    </group>
  </group>
</launch>